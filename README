================
DeeFuzzer README
================

deefuzzer : an easy and instant media streaming tool


Introduction
============

DeeFuzzer is a new light and instant software made for streaming audio and video over internet. It is dedicated to people who wants to create playlisted web radios or web TVs with rich media contents including some metadata.

Here are the main features of the deefuzzer:

 * MP3 and OGG (audio & video) file streaming over internet (Icecast)
 * Full metadata encapsulation and management
 * RSS podcast generator (current tracks and playlists)
 * M3U playlist generator
 * Recursive, random (shuffled) or pre-defined playlists
 * Multi-threaded architecture : multiple station streaming with one config file
 * Auto Twitter posting of the current playing tracks
 * Jingling between main tracks
 * OSC controller : control the main functions from a distant terminal
 * Station relaying : stream other stations like *LIVE* sessions !
 * Very light and optimized streaming process

It is neccessary to provide a config file which sets all needed parameters
Please see example/myfuzz.xml for an example.


Installation
============

see INSTALL


License
=======

This software is licensed as described in the file COPYING, which
you should have received as part of this distribution. The terms
are also available at http://svn.parisson.org/deefuzzer/DeeFuzzerLicense


Usage
=====

Usage : deefuzzer CONFIGFILE

where CONFIGFILE is the path for a XML config file. For example::

$ deefuzzer example/myfuzz.xml

To make the deefuzzer act as a deamon, just play it in the background::

$ deefuzzer example/myfuzz.xml &

Note that you must edit the config file with right parameters before playing.
You can find an example for a draft XML file in the directory "example/" of this
application (maybe in /usr/share/deefuzzer/example/ if installed with the help of install.py)

Since 0.3, deefuzzer doesn't print anything into the shell, then a right <log> parameter
is needed in the XML config file.

BE CAREFULL : at the moment, the multi-threaded implementation of deefuzzer instances
avoids shutting down the streams with CTRL+C... You have to kill them manually,
after a CTRL+Z, making this::

$ kill -9 PROCESS_ID

or::

$ kill -9 `pgrep deefuzzer`


XML Configuration
=================

Example ::

<deefuzzer>
    <!-- A path to the log file (need directory write access rights) -->
    <log>/path/to/log/mystation.log</log>

    <!-- A path to the M3U playlist file (need directory write access rights).
         The file is preferably accessible behind an url,
         for example, http://mydomain.com/m3u/mystation.m3u -->
    <m3u>/path/to/m3u/mystation.m3u</m3u>

    <station>
        <infos>
            <!-- The short name of the station. It will define the mount point,
                 for example http://mydomain.com:8000/my_station.mp3 -->
            <short_name>my_station</short_name>

            <!-- The name (title) of the station -->
            <name>My best funky station</name>

            <!-- The description of the station -->
            <description>My personal best funky playlist ever !</description>

            <!-- The website of the station (for metadata) -->
            <url>http://mydomain.com</url>

            <!-- The genres of the audio streams -->
            <genre>Various Funk Groove</genre>
        </infos>

        <server>
            <!-- The host to send the stream (domain or IP) -->
            <host>mydomain.com</host>
            <!-- The port of the Icecast2 server on the host -->
            <port>8000</port>
            <!-- The source password of the Icecast2 server on the host -->
            <sourcepassword>icecast_source_password</sourcepassword>
            <!-- If 1, the mount point will be public on yp.icecast.org, 0 for a private stream -->
            <public>1</public>
        </server>

        <media>

            <dir>/path/to/mp3/</dir>
            <format>mp3</format>
            <bitrate>192</bitrate>
            <ogg_quality>7</ogg_quality>
            <samplerate>44100</samplerate>
            <voices>2</voices>
            <shuffle>1</shuffle>
        </media>
        <rss>
            <dir>/path/to/rss/</dir>
            <enclosure>1</enclosure>
        </rss>
        <twitter>
            <mode>0</mode>
            <user>my_twitter_user</user>
            <pass>my_twitter_password</pass>
            <tags>bla bla</tags>
        </twitter>
        <jingles>
            <mode>0</mode>
            <dir>/path/to/jingles</dir>
            <shuffle>1</shuffle>
        </jingles>
        <control>
            <mode>0</mode>
            <port>1234</port>
        </control>
        <relay>
            <mode>0</mode>
            <url>http://anotherdomain.com:8000/stream.mp3</url>
        </relay>
    </station>
</deefuzzer>


OSC Control
===========

We can now control some functions of the deefuzzer with external commands
coming from an OSC client. These are accessible only if the "control" tag is
set up in the config file (see example/myfuzz.xml again...).

Next track::

$ python tools/osc_next.py

Start twitting::

$ python tools/osc_twitter_start.py

Stop twitting::

$ python see tools/osc_twitter_stop.py

Start relaying::

$ python tools/osc_relay_start.py

Stop relaying::

$ python see tools/osc_relay_stop.py

Start jingling::

$ python see tools/osc_jingles_start.py

Stop jingling::

$ python see tools/osc_jingles_stop.py


Author
======

Guillaume Pellerin <yomguy@parisson.com>


Licence
=======

See COPYING


Aknowledgements
===============

This work is inspired by the great - C coded - Oddsock's streaming program : Ezstream.
Since I needed to patch it in order to modify the playlist (randomize for example)
and make external batch tools to create multiple channels, I decided to rewrite it
from scratch in python.

Some parts of this work are also taken from another Parisson's project : Telemeta
(see http://telemeta.org).


Contact / Infos
===============

see http://svn.parisson.org/deefuzzer/ or http://parisson.com for more info.

